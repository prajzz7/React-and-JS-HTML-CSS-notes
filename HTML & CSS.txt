HTML

1) meta tags : <meta> Helps in improving SEO
2) html 5 semantics : <header> footer main section aside etc.
3) Logical vs Physical tags : <strong> and <b> are smae they bold elements just like <em> and <i> text turns italic. The differenece is in semantics so anyone lookng at the code will know it is an important text since its wrapped in strong and <b> doesnt give much story about it. Also strong is good for SEO.
4)iFrame : embed other website pages or videos on to your website with iframe src


CSS 

1) CSS specificity : div p { color : red} has specificity 2 because div 1 + p 1 = 2, p {color: red } has specificity 1, #id{ color: red} has specificity of 100, for class has 10
2) box-sizing : It is a property for sizing a box or a container/element.
		a) If its border box :- then if container has width 200px and if you give padding inside the container say 20px on left and right the total width of container will remain 200px. Since padding and border are included in this width
		b) If it is content-box(even by default without box-sizing property it is content-box) :- 		then if container has width 200px and padding is given 20 px left right then total width of 		container become 240px
3) CSS variables: They are defined starting with -- for eg: --bgcolor and used as background-color: var(--bgcolor). VAriables defined have scope they can be used in child element but not in parent element. 
4) CSS selectors : div + p : + represents select immediate next sibling so selected p is sibling to d,
   div ~ p : selects all sibling which is p
   div > p : selects all the Direct children . So p is direct children of div then it will select not if p is nested in some other element which is child of div 

5) CSS pseudo selectors : :hover, active, focus, div:not(.list) - select all elements in div except class list
6) CSS pseudo elements : ::before, after , first-line,last-line, first-letter
7) p tags cant have h1 as child it throws it out and makes it a sibling element in dom instead of child.
8) Attribute selector : HTML : <ul> 
				<li data-foodType='non-veg'>Pizza</li>
				<li data-foodType='veg, non-veg'>Burger</li> 
			     </ul>
			CSS : ul li[data-foodType='non-veg']{ color: red }
			      ul li[data-foodType]{ color: red }
			      ul li[data-foodType^='veg']{ color: red } -> ^ means every attribute that 									     starts with veg
			      ul li[data-foodType*='veg']{ color: red } -> * means every attribute that 									     contains veg
									   $ means every attribute that 									     ends with veg

9) Flex: example-
Flex-basis:150px /*if given of box1 Width of that box1 will override if width given before this*/
/*Flex basis gives width 150px fixed to the element, so imagine we gave flex-basis 150px to both boxes. Now, */
Flex-grow: 1; /*on box1 will give up remaining space outside boxes to box1*/
Flex-shrink: 2 /* when screen size shrinks the box shrinks in the ratio of flex-shrink given to them. If box-1 has flex-shrink:2 box-2 has flex-shrink:1, box-1 will shrink twice faster than box-1.

So flex:1 2 150px is same as above, i.e. flex-basis will give fixed width 150px and after that the remaining space will be used for flex-grow. And if you set flex-basis to 0 the entire space will be distributed according to flex-grow. SO if box 1 has flex-grow 10 and box 2 has flexgrow 2, all of the space will be distributed in 10:2 ratio to box1 and box2.
Now, if box1 has flex-shrink 2 and box2 has flex-shrink 1 and if screensize is 300px and both boxes have flex-basis(width) 150px so if you decrease the screen size even more from 300px the boxes will shrink so box1 will shrink twice the size as box1 since box1 has flex-shrink2 and box has flex-shrink1

